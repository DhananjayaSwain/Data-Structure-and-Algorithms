#include<stdio.h>
#include<stdlib.h>


void main(){

    int a[50][50],b[50][50],c[50][50],r1,c1,r2,c2,r3,c3,r[20],l;
    int i,j;
    printf("Ensure that convention is (column X Row)\n");
    printf("Enter the size of first Matrix1 (column and row):");
    scanf("%d %d",&r1,&c1);
    printf("Enter the size of first Matrix2 (column and row):");
    scanf("%d %d",&r2,&c2);
    printf("Enter the size of first Matrix3 (column and row)");
    scanf("%d %d",&r3,&c3);

    printf("Enter the values of 1st Matrix");
    for(i=0;i<r1;i++)
        for(j=0;j<c1;j++)
            scanf("%d",&a[i][j]);

    printf("Enter the values of 2nd Matrix");
    for(i=0;i<r2;i++)
        for(j=0;j<c2;j++)
            scanf("%d",&b[i][j]);

    printf("Enter the values of 3rd Matrix");
    for(i=0;i<r3;i++)
        for(j=0;j<c3;j++)
            scanf("%d",&c[i][j]);


    r[0]=((r2*r1*c1)+((r1-1)*r2*c1))+((r3*r2*c1)+((r2-1)*r3*c1)); //(AB)c
    r[1]=((r1*c1*r3)+((r1-1)*r3*c1))+((r3*c1*r2)+((r3-1)*r2*c1)); //(AC)B
    r[2]=((r3*r2*c2)+((r2-1)*r3*c2))+((r1*r3*c2)+((r3-1)*r1*c2)); //(BC)A
    r[3]=((r1*r2*c2)+((r2-1)*r1*c2))+((r3*r1*c2)+((r1-1)*r3*c2)); //(BA)c
    r[4]=((r1*r3*c3)+((r3-1)*r1*c3))+((r2*r1*c3)+((r1-1)*r2*c3)); //(CA)B
    r[5]=((r2*r3*c3)+((r3-1)*r2*c3))+((r1*r2*c3)+((r2-1)*r1*c3)); //(CB)A
    r[6]=((r3*r2*c2)+((r2-1)*r3*c2))+((r3*r1*c1)+((r1-1)*r3*c1)); //A(BC)
    r[7]=((r2*r3*c3)+((r3-1)*r2*c3))+((r2*r1*c1)+((r1-1)*r2*c1)); //A(CB)
    r[8]=((r1*r3*c3)+((r3-1)*r1*c3))+((r1*r2*c3)+((r2-1)*r1*c2)); //B(cA)
    r[9]=((r3*r1*c1)+((r1-1)*r3*c1))+((r3*r2*c2)+((r2-1)*r3*c2)); //B(Ac)
    r[10]=((r2*r1*c1)+((r1-1)*r2*c1))+((r2*r3*c3)+((r3-1)*r2*c3)); //C(AB)
    r[11]=((r1*r2*c2)+((r2-1)*r1*c2))+((r1*r3*c3)+((r3-1)*r1*c3)); //C(BA)

    l=r[0];
    for(i=1;i<12;i++)
    {
        if(r[i]<l)
            l=r[i];
    }
    for(i=1;i<12;i++)
    {
        if(l==r[i])
            break;
    }

    switch(i){
    case 0: printf("(AB)c <= Uses %d no of Operations",l);
        break;
    case 1:printf("(AC)B <= Uses least %d of Operations",l);
        break;
    case 2:printf("(BC)A <= Uses least %d no of Operations",l);
        break;
    case 3:printf("(BA)c <= Uses least %d no of Operations",l);
        break;
    case 4:printf("(CA)B <= Uses least  %d no of Operations",l);
        break;
    case 5:printf("(CB)A<= Uses least %d no of Operations",l);
        break;

    case 6:printf("A(BC) <= Uses least %d no of Operations",l);
        break;
    case 7:printf("A(CB) <= Uses least %d no of Operations",l);
        break;
    case 8:printf("B(cA) <= Uses least %d no of Operations",l);
        break;

    case 9:printf("B(Ac) <= Uses least %d no of Operations",l);
        break;
    case 10:printf("C(AB) <= Uses least %d no of Operations",l);
        break;
    case 11:printf("C(BA) <= Uses least %d no of Operations",l);
        break;

    }
}
